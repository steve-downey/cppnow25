#+OPTIONS: ':nil *:t -:t ::t <:t H:4 \n:nil ^:nil arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:5 p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:nil todo:t |:t
#+TITLE: ~std::optional<T&>~
#+SUBTITLE: A Case Study
#+DATE: <2024-02-01 Thu>
#+AUTHOR: Steve Downey
#+EMAIL: sdowney2@bloomberg.net
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+LATEX_CLASS: report
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
#+OPTIONS: html-link-use-abs-url:nil html-postamble:nil html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../etc/modus-vivendi-tinted.css"/>
#+HTML_HEAD_EXTRA:
#+INFOJS_OPT:
#+CREATOR:
#+LATEX_HEADER:
#+STARTUP: showall

#+OPTIONS: reveal_width:1600 reveal_height:900
#+REVEAL_TRANS: fade
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../etc/modus-vivendi-tinted.css" />

#+REVEAL_PLUGINS: (math markdown notes search zoom)
#+REVEAL_EXTRA_CSS: ../etc/modus-vivendi-tinted.css
#+REVEAL_THEME: ../etc/my_theme.css
#+REVEAL_EXTRA_CSS: ../etc/footer.css
#+REVEAL_TITLE_SLIDE: <p>
#+REVEAL_TITLE_SLIDE_BACKGROUND: ./title.png

#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_VERSION: 4

#+REVEAL_HLEVEL: 1
#+REVEAL_EXPORT_NOTES_TO_PDF: separate-page
#+REVEAL_DEFAULT_FRAG_STYLE: (appear)

#+CITE_EXPORT: csl ../etc/chicago-author-date.csl
#+BIBLIOGRAPHY: ../etc/wg21.bib
#+BIBLIOGRAPHY: ../etc/local.bib

* Colophon

- Slideware: [[https://revealjs.com/][reveal.js]]
- Slide Preperation: [[https://gitlab.com/oer/org-re-reveal][org-re-reveal]]
- Fonts: [[https://www.brailleinstitute.org/freefont/][Atkinson Hyperlegible]] Next and Mono
- Color Themes: [[https://github.com/protesilaos/modus-themes][Modus]] Vivendi and Operandi Tinted

Intended to conform to [[https://www.w3.org/WAI/WCAG2AAA-Conformance][Web Content Accessibility Guidelines level AAA]]

#+ATTR_HTML: :height 32 :width 88px
[[../etc/wcag2.2AAA-blue.svg]]

#+begin_notes
#+end_notes
* Standardising Optionals over References
Optionals were first proposed for C++ in 2005.

Optional<T> where T is constrained not to be a reference was added in 2017.

Optionals for lvalue references are on track for C++ 26.

#+begin_notes
#+begin_src cpp
0         1         2         3         4         5         6         7
01234567890123456789012345678901234567890123456789012345678901234567890123456789
#+end_src

This talk will discuss the early history, starting with Boost.Optional and [cite/title/b:@N1878], and what the early concerns were for the reference specialization.  [cite/title/b:@P1175R0] ,  reproposed reference support for C++20, which was not adopted. [cite/title/b:@P1683R0],  in 2020 surveyed existing behavior of optional references in the wild, and pointed out the trap of assingment behaviour being state dependent. [cite/title/b:@P2988R0] picked up the torch again in 2023, of which revision 9 is the proposal which is design approved by the Library Evolution Working Group.

In 2024, the proposal to make optional a range, [cite/title/b:@P3168R0], as opposed to having a separate range of zero or one, was adopted. The reference implementation for ~optional<T&>~ and the test cases for ~views::maybe~ were used to vet the additional interfaces for optional range support. This merged implementation became one of the first Beman libraries, where the library and the optional reference proposal  benefited immensly from the visibility and feedback.

#+end_notes

** Why so long?
- What were the concerns that made the process take so long
- How were concerns addressed
- What did we end up with
- What remains to be done?

#+begin_notes

The core of the difficulty has been that references are not values  and  types containing a reference do not have value semantics. References do not fit comfortably in the C++ type system. The core value semantic type that also has reference semantics is a pointer, but pointers have underconstrained and unsafe semantics. The long discussion has been a proxy for what reference semantic types should look like in value semantic types in the standard library, particularly for "sum" types, like ~expected~ and ~variant~, but also for types such as ~single~.
#+end_notes

* Quick overview of optional<T&>

A non-owning type with reference semantics with one additional, empty, value.

** intro
#+transclude: [[file:optional-synopsis.hpp::fb8602f8-ef1d-49ce-94ed-a141adfe7a5c]] :lines 2- :src cpp :end "fb8602f8-ef1d-49ce-94ed-a141adfe7a5c end"

** Constructors

#+transclude: [[file:optional-synopsis.hpp::2f167cef-1888-487e-9fd2-c26cc27c3c92]] :lines 2- :src cpp :end "2f167cef-1888-487e-9fd2-c26cc27c3c92 end"

** Constructors (continued)
#+transclude: [[file:optional-synopsis.hpp::f6696e02-de4e-4200-bd98-1bb3027e2d72]] :lines 2- :src cpp :end "f6696e02-de4e-4200-bd98-1bb3027e2d72 end"

** Destructor
#+transclude: [[file:optional-synopsis.hpp::b19ae341-c9bf-4ada-9c34-dfd955947cc9]] :lines 2- :src cpp :end "b19ae341-c9bf-4ada-9c34-dfd955947cc9 end"

** Assignment
#+transclude: [[file:optional-synopsis.hpp::3109c3b6-fce3-42c1-88e9-be8b353aadb9]] :lines 2- :src cpp :end "3109c3b6-fce3-42c1-88e9-be8b353aadb9 end"

** Swap
#+transclude: [[file:optional-synopsis.hpp::904f4d4b-de24-459f-bc07-00a93a45c9dc]] :lines 2- :src cpp :end "904f4d4b-de24-459f-bc07-00a93a45c9dc end"

** Iterator
#+transclude: [[file:optional-synopsis.hpp::646f38bf-9b8b-482a-b68d-24297c1c2636]] :lines 2- :src cpp :end "646f38bf-9b8b-482a-b68d-24297c1c2636 end"

** Observers
#+transclude: [[file:optional-synopsis.hpp::5383e2b9-ee37-4c47-8cee-4dd143dd8d27]] :lines 2- :src cpp :end "5383e2b9-ee37-4c47-8cee-4dd143dd8d27 end"

** Monadic Operations
#+transclude: [[file:optional-synopsis.hpp::4f2fafac-9479-47ce-8f15-983c315af300]] :lines 2- :src cpp :end "4f2fafac-9479-47ce-8f15-983c315af300 end"

** Modifiers
#+transclude: [[file:optional-synopsis.hpp::62d12978-14b9-4ecf-afb0-e80e25062a3b]] :lines 2- :src cpp :end "62d12978-14b9-4ecf-afb0-e80e25062a3b end"

** Exposition-only Details
#+transclude: [[file:optional-synopsis.hpp::339cf95f-5e8a-48b3-b745-7e40ae2eaa23]] :lines 2- :src cpp :end "339cf95f-5e8a-48b3-b745-7e40ae2eaa23 end"

* The Papers
- 2005: N1878: A Proposal to Add an Utility Class to Represent Optional Objects (Revision 1)
- 2012: N3406: A Proposal to Add a Utility Class to Represent Optional Objects (Revision 2)
- 2013: N3527: A Proposal to Add a Utility Class to Represent Optional Objects (Revision 3)
- 2013: N3672: A Proposal to Add a Utility Class to Represent Optional Objects (Revision 4)
- 2015: N4529: Working Draft, c++ Extensions for Library Fundamentals, Version 2
- 2016: P0220R0: Adopt Library Fundamentals Ts for c++17
- 2018: P1175R0: A Simple and Practical Optional Reference for c++
- 2020: P1683R0: References for Standard Library Vocabulary Types - an Optional Case Study
- 2023: P2988R0: ~std:optional<T&>~


#+begin_notes
Optional was pulled at the last moment of 14 because of UB in the implementation technique of placement new with a storage buffer.
Library TSs hadn't fully failed at that point.
[cite/n:@N1878]
[cite/n:@N3406]
[cite/n:@N3527]
[cite/n:@N3672]
[cite/n:@N4529]
[cite/n:@P0220R0]
[cite/n:@P1175R0]
[cite/n:@P1683R0]
[cite/n:@P2988R0]
#+end_notes



* The Problems
** Assign or Rebind?
#+begin_src cpp
Cat fynn;
Cat loki;
optional<Cat&> maybeCat1;
optional<Cat&> maybeCat2{fynn};
maybeCat1 = loki;
maybeCat2 = fynn;
#+end_src
What do those assignments do?

Ought they be allowed?

State independence won out, eventually.
#+begin_notes

#+end_notes
** Non-generic template
~optional<T&>~ violates genericity.

The ~vector<bool>~ problem only for an entire value category.

Reference categories are weird and non-generic.
#+begin_notes
#+end_notes
** Constexpr and UB issues
At the time of C++14 they couldn't quite be constexpr.

Placement new had issues as did union techniques.

We taught the constexpr more things.
#+begin_notes
#+end_notes

* Design Choices
** ~make_optional~
src_cpp[:exports code]{make_optional} largely supplanted by CTAD.

src_cpp[:exports code]{make_optional<T&>} creates an optional<T>. Doing otherwise would have been worse.

#+begin_notes
#+end_notes
** Trivial construction
src_cpp[:exports code]{is_trivial} deprecated in 26.

No worse than they have to be.
#+begin_notes
#+end_notes
** Value Category Affect on src_cpp[:exports code]{optional<T&>::value() &&}
What should src_cpp[:exports code]{optional<T&>::value()&&;} return?

Choose to model pointers, a reference semantic value type.

Value category of the object does not affect value category of the referent.

Otherwise an rvalue src_cpp[:exports code]{optional<T&>} could enable moves from the referent.
#+begin_notes
#+end_notes
** Shallow vs Deep src_cpp[:exports code]{const}
What should src_cpp[:exports code]{optional<T&>::value() const;} return?

Choose to model pointers, a reference semantic value type.

A const pointer is not a pointer to const.

All langauge references are const. An src_cpp[:exports code]{optional<T&>} is a reference semantic type.

Not a reference.

#+begin_notes
#+end_notes
** Conditional Explicit
Is src_cpp[:exports code]{optional<T&>} required?

I would have preferred to, but it was too painful.

However lack of src_cpp[:exports code]{explicit} makes the type exponentially more complex as there are more interactions between member functions.
#+begin_notes
#+end_notes
** src_cpp[:exports code]{value_or}
What should src_cpp[:exports code]{optional<T&>::value_or(U &&u);} return?

What is the "value type" for an optional.

All choices are surprising to someone.

Chose to return T, as that seems least dangerous.

Future work: generic src_cpp[:exports code]{nullable} functions.

#+begin_notes
#+end_notes
** src_cpp[:exports code]{in_place_t} construction
There is no "place" to construct.
#+begin_notes
#+end_notes
** Converting assignment
Avoid conversions that produce temporaries.

Avoid confusion with src_cpp[:exports code]{optional<U&>} or src_cpp[:exports code]{optional<T>} constructors.

Large overload sets are difficult to reason about.

#+begin_notes
#+end_notes
* Reification Principles
** Construction from temporary

#+begin_notes
#+end_notes
** Deleting dangling overloads

#+begin_notes
#+end_notes
** Assignment of src_cpp[:exports code]{optional<T&>}

#+begin_notes
#+end_notes
** Copy and Assignment of src_cpp[:exports code]{optional<U&>&&} to src_cpp[:exports code]{optional<T>}

#+begin_notes
#+end_notes
* The T& Problem
** Overloaded syntax
*** Parameter Passing
*** Named alias
*** Non-null const pointer in a struct

** References are not Data

#+begin_notes
#+end_notes
* src_cpp[:exports code]{T&} in an Generic Algebraic Type
** Request for reference semantics

#+begin_notes
#+end_notes
** Not a request for T& weirdness

#+begin_notes
#+end_notes
** Biggest problem for Union-like types: Sum Types

#+begin_notes
#+end_notes
* Project Beman
** Began last year at C++ Now 2024
#+begin_notes
#+end_notes

** Pre-existing smd::optional
Confirmed at Tokyo that the range-ification would work for my test cases.
#+begin_notes
#+end_notes

** The ref-stealing bug found
#+begin_src cpp
Cat fynn;
std::optional<Cat&> maybeCatRef{fynn};
std::optional<Cat> maybeCat;
maybeCat = std::move(maybeCatRef);
// fynn is moved from
#+end_src

Now fixed.
*** The fix
Don't move the result of operator*, move the rhs and apply operator*().

#+begin_src cpp
//instead of
*std::move(rhs)
// use
std::move(*rhs)
#+end_src

Because
#+begin_src cpp
std::optional<T&>::operator*() &&;
#+end_src

does not return an rvalue reference.

#+begin_notes
#+end_notes
* Future Standards Work
** src_cpp[:exports code]{std::expected}

#+begin_notes
#+end_notes
** src_cpp[:exports code]{std::variant}

#+begin_notes
#+end_notes
** src_cpp[:exports code]{std::views::single}

#+begin_notes
#+end_notes
** src_cpp[:exports code]{rebindable_reference}

#+begin_notes
#+end_notes
** Exposition-only src_cpp[:exports code]{movable_box<T>}

#+begin_notes
#+end_notes

* Questions?
Remember a question starts with:

#+ATTR_REVEAL: :frag (current-visible)
- who
- what
- when
- where
- how
- why

#+REVEAL: split:t
or
- A propositional statement :: a statement that has a truth value, either true or false, but not both.

#+REVEAL: split:t
and goes up at the end.

#+REVEAL: split:t
#+begin_quote
"More of a comment than a question ..."
#+end_quote
Is a propositional statement, but hold them for a moment.
* Comments?

* Thank You!

* Bibliography
#+CITE_EXPORT: csl chicago-author-date.csl
#+print_bibliography:

# Local Variables:
# org-html-htmlize-output-type: css
# End:
